# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LEAOEs-gHa8jPv9V8zpcKOiAukHMyXrK
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import os
import cv2
from PIL import Image, ImageFilter
import matplotlib.pyplot as plt
import matplotlib.image as mpimg
from matplotlib.pyplot import axis, colorbar, imshow, show, figure, subplot, imread
from matplotlib.colors import NoNorm
from matplotlib import cm
from mpl_toolkits.axes_grid1 import make_axes_locatable
# %matplotlib inline
import seaborn as sns
sns.set_style("darkgrid")

eightPath = '/content/eight (2).tif'
im = Image.open(eightPath)
im_blur = np.array(im.filter(ImageFilter.GaussianBlur(3)))

import numpy as np
import os
import cv2
def addNoise(i, s):
    r,c= i.shape
    m = 0
    g = np.random.normal(m,s,(r,c))
    g = g.reshape(r,c)
    n = i + g
    return n

original = mpimg.imread(eightPath)
original = addNoise(original, 0)
plt.imshow(original)
plt.title('Original original with no Gaussian noise')
plt.grid(False)
plt.gray()
plt.show()
image2 = addNoise(original, 10)
plt.imshow(image2)
plt.title('Original original with Gaussian noise: sigma = 10')
plt.grid(False)
plt.gray()
plt.show()
image3 = addNoise(original, 100)
plt.imshow(image3)
plt.title('Original original with Gaussian noise: sigma = 100')
plt.grid(False)
plt.gray()
plt.show()

kx = np.array([[-1,0,1],[-2,0,2],[-1,0,2]])
ky = np.array([[1,2,1],[0,0,0],[-1,-2,-1]])
x = cv2.filter2D(original, -1, kx)
y = cv2.filter2D(original, -1, ky)
sobel = x**2 + y**2
plt.imshow(sobel)
plt.grid(False)
plt.title('Image without Gaussian noise: Sobel filter')
plt.show()

kx = np.array([[1,1,1],[0,0,0],[-1,-1,-1]])
ky = np.array([[-1,0,1],[-1,0,1],[-1,0,1]])
px = cv2.filter2D(original, -1, kx)
py = cv2.filter2D(original, -1, ky)
prewitt = px**2 + py**2
plt.imshow(prewitt)
plt.grid(False)
plt.title('Image without Gaussian noise: Prewitt filter')
plt.gray()
plt.show()

def cumHist(i):
    pdf = np.histogram(i, bins=range(0,257))[0]
    pdf_sum = np.sum(pdf)
    cdf = np.cumsum(pdf).astype(float)/ pdf_sum
    return cdf

def midwayEqu(imgs):
    cdfList = []
    for k in range(2):
        cdfList.append(cumHist(imgs[k]))
    imageResList = []
    for x in range(2):
        res = 0
        for z in range(2):
            inverse = np.empty_like(cdfList[z])
            for i in range(255):
                inverse[i] = np.min(np.where(cdfList[z] >= cdfList[x][i])) 
            res += inverse[imgs[x]]
        res *=  1 / len(imgs)
        imageResList.append(res)
    cdfResList = []
    for i in range(2):
        cdfResList.append(cumHist(imageResList[i]))
    return np.array(imageResList), np.array(cdfResList)

m1 = cv2.imread('/content/movie_flicker1.tif', 0)
m2 = cv2.imread('/content/movie_flicker2.tif', 0)

images = np.stack((m1, m2))
cdfList = []
for x in range(2):
    cdfList.append(cumHist(images[x]))

imgRes, cdfRes = midwayEqu(images)
plt.figure(figsize=(14, 4))

for i in range(2):
    plt.subplot(1, 2, i+1)
    plt.imshow(images[i], cmap=cm.Greys_r, vmin=0, vmax=255)
    plt.axis('off')
    plt.grid(False)
    plt.title('Original - movie_flicker ' + str(i+1) + '.tif')
              
plt.figure(figsize=(14, 4))
for i in range(0, 2):
    plt.subplot(1, 2, i+1)
    plt.imshow(imgRes[i], cmap=cm.Greys_r, vmin=0, vmax=255)
    plt.axis('off')
    plt.grid(False)
    plt.title('Resulting ' + str(i+1))

fig = plt.figure(figsize=(10,5))
cdfs = np.array(cdfList)
for i in range(len(cdfs)):
    plt.plot(cdfs[i]*100, label='CDF original: movie_flicker ' + str(i+1) + '.tif')
    plt.plot(cdfRes[i]*100, label='CDF resulting ' + str(i+1))
plt.title("CDF for images");
plt.ylabel("Cumulative %")
plt.xlabel("Pixel Value")
plt.legend()
plt.show()

from skimage.io import imread
from skimage.morphology import binary_dilation
image5 = imread("/content/5.tif")/255
BM1 = np.array([[1.,1.,1.],[0,1.,0],[0,1.,0]])
BM2 = np.array([[0,1.],[1.,0]])
BM3 = np.array([[0,0,1.]])

f, a = plt.subplots(1,3)
m1 = np.array([[1,1.,1.],[0,1.,0],[0,1.,0]])
a[0].imshow(m1)
a[0].set_title("Binary mask 1")

m2 = np.array([[0,1.],[1.,0]])
a[1].imshow(m2)
a[1].set_title("Binary mask 2")

m3 = np.array([[0,0,1.]])
a[2].imshow(m3)
a[2].set_title("Binary mask 3")



f, a = plt.subplots(1,2)
a[0].imshow(image5)
a[0].set_title("Original 5")
a[1].imshow(binary_dilation(image5, selem=BM1))
a[1].set_title("Mask 1 applied")

f, a = plt.subplots(1,2)
a[0].imshow(image5)
a[0].set_title("Original 5")
a[1].imshow(binary_dilation(image5, selem=BM2))
a[1].set_title("Mask 2 applied")

f, a = plt.subplots(1,2)
a[0].imshow(image5)
a[0].set_title("Original 5")
a[1].imshow(binary_dilation(image5, selem=BM3))
a[1].set_title("Mask 3 applied")

f, a = plt.subplots(1,2)
a[0].imshow(np.pad(BM1, 2))
a[0].set_title("SE 1 input")
a[1].imshow(binary_dilation(np.pad(BM1, 2), selem=image5))
a[1].set_title("Dilation on SE 1")

f, a = plt.subplots(1,2)
a[0].imshow(np.pad(BM2, [(2,3), (2,3)]))
a[0].set_title("SE 2 input")
a[1].imshow(binary_dilation(np.pad(BM2, [(2,3), (2,3)]), selem=image5))
a[1].set_title("Dilation on SE 2")

f, a = plt.subplots(1,2)
a[0].imshow(np.pad(BM3, [(3,3), (2,2)]))
a[0].set_title("SE 3 input")
a[1].imshow(binary_dilation(np.pad(BM3, [(3,3), (2,2)]), selem=image5))
a[1].set_title("Dilation on SE 3")

